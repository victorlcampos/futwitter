metric_fu shift the first line
================================================================================
 ./app/controllers/application_controller.rb
================================================================================
   class ApplicationController < ActionController::Base
     protect_from_forgery
     before_filter :load_teams
     before_filter :load_championchip
   
     protected
     def load_championchip
!!     @championships = Championship.all
     end
   
     def load_teams
!!     @teams = Team.all
     end
   end

================================================================================
 ./app/controllers/home_controller.rb
================================================================================
   class HomeController < ApplicationController
     skip_before_filter :load_teams, :load_championchip
   
     def index
!!     UpdateMatchService.new.update_matches_from_internet
   
!!     @matches = Match.includes(:home_team, :away_team).all
!!     @teams = Team.all
!!     @championships = Championship.all
     end
   end

================================================================================
 ./app/controllers/matches_controller.rb
================================================================================
   class MatchesController < ApplicationController
     def show
!!     @match = Match.find(params[:id])
!!     UpdateMovesService.new(@match).update_moves_from_internet
!!     @moves = @match.moves
!!     @home_tweets_per_minute = @match.home_tweets_per_minute
!!     @away_tweets_per_minute = @match.away_tweets_per_minute
     end
   end

================================================================================
 ./app/controllers/teams_controller.rb
================================================================================
   class TeamsController < ApplicationController
     def show
!!     @team = Team.find(params[:id])
!!     @match = @team.current_match
!!     @news = @team.news
     end
   end

================================================================================
 ./app/helpers/application_helper.rb
================================================================================
   module ApplicationHelper
   end

================================================================================
 ./app/helpers/teams_helper.rb
================================================================================
   module TeamsHelper
     def team_classes(team)
!!     championships_ids = team.championships_ids
!!     "filter championship_#{championships_ids.join(' championship_')}"
     end
   end

================================================================================
 ./app/models/championship.rb
================================================================================
   class Championship < ActiveRecord::Base
     attr_accessible :name
   
     has_many :matches
   
   
     def name=(name)
       write_attribute(:name, name.downcase)
     end
   
     def name
       read_attribute(:name).humanize
     end
   end

================================================================================
 ./app/models/match.rb
================================================================================
   class Match < ActiveRecord::Base
     has_many :moves
   
     belongs_to :home_team, class_name: 'Team'
     belongs_to :away_team, class_name: 'Team'
     belongs_to :championship
   
     attr_accessible :home_team, :away_team, :home_team_score,
                     :away_team_score, :championship, :internet_url, :start_time
   
     delegate :name, to: :championship, prefix: true
     delegate :name, :badge_url, :tweets_count, to: :home_team, prefix: true
     delegate :name, :badge_url, :tweets_count, to: :away_team, prefix: true
   
     def home_tweets_per_minute
!!     team_tweets_per_minute(home_team)
     end
   
     def away_tweets_per_minute
!!     team_tweets_per_minute(away_team)
     end
   
     def end_time
!!     start_time + 2.hours
     end
   
     private
     def team_tweets_per_minute(team)
!!     (team.tweets_count / passed_minutes).round
     end
   
     def passed_minutes
!!     (end_time_count_tweet - start_time_count_tweet) / 60
     end
   
     def end_time_count_tweet
!!     [Time.zone.now, end_time + 30.minute].min
     end
   
     def start_time_count_tweet
!!     start_time - 30.minutes
     end
   end

================================================================================
 ./app/models/move.rb
================================================================================
   class Move < ActiveRecord::Base
     default_scope order('half Desc, minute Desc')
   
     belongs_to :match
     attr_accessible :match_id, :minute, :text, :team_name, :half
   
     def team_name=(team_name)
       write_attribute(:team_name, team_name.downcase) if team_name
     end
   
     def team_name
       my_team_name = read_attribute(:team_name)
       my_team_name.humanize if my_team_name
     end
   end

================================================================================
 ./app/models/news.rb
================================================================================
   class News < ActiveRecord::Base
     mount_uploader :image, ImageUploader
   
     belongs_to :team
   end

================================================================================
 ./app/models/team.rb
================================================================================
   class Team < ActiveRecord::Base
     mount_uploader :badge, BadgeUploader
   
     has_many :home_matches, class_name: 'Match', foreign_key: 'home_team_id'
     has_many :away_matches, class_name: 'Match', foreign_key: 'away_team_id'
     has_many :news
     has_many :tweets
   
     attr_accessible :name
     after_create :schedule_twitter
   
     def matches
!!     my_id = self.id
!!     Match.where('home_team_id = ? OR away_team_id = ?', my_id, my_id)
     end
   
     def championships
!!     Championship.joins(:matches).merge(matches)
     end
   
     def championships_ids
!!     championships.pluck('championships.id')
     end
   
     def current_match
!!     matches.last
     end
   
     def current_match_end_time
!!     current_match.end_time
     end
   
     def current_match_start_time
!!     current_match.start_time
     end
   
     def name=(name)
       write_attribute(:name, name.downcase)
     end
   
     def name
       read_attribute(:name).humanize
     end
   
     private
     def schedule_twitter
       Resque.enqueue(TwitterStream, id)
     end
   end

================================================================================
 ./app/models/tweet.rb
================================================================================
   class Tweet < ActiveRecord::Base
     belongs_to :team, counter_cache: true
     attr_accessible :geo, :text, :team, :minute
   
     def self.create_using_real_tweet(real_tweet, team)
!!     tweets_params = {
         text: real_tweet.text,
         geo: real_tweet.geo,
         team: team,
         minute: get_minute(team)
       }
!!     Tweet.create!(tweets_params)
     end
   
     private
     def self.get_minute(team)
!!     (Time.zone.now - team.current_match_start_time) / 60
     end
   end

================================================================================
 ./app/services/update_match_service.rb
================================================================================
   class UpdateMatchService
     LANCENET_URL = 'http://temporeal.lancenet.com.br/'
   
     def update_matches_from_internet
!!     doc = Nokogiri::HTML(open(LANCENET_URL))
   
!!     doc.css('#listaJogos tr').each do |match|
!!       datas = match.css('td')
!!       update_or_create_match(match_data(datas), parents(datas))
       end
     end
   
     private
     def match_data(datas)
       {
         home_team_score: datas[1].text,
         away_team_score: datas[3].text,
         internet_url: datas.css('a').first.attributes['href'].value,
         start_time: start_time(datas)
!!     }
     end
   
     def start_time(datas)
!!     date_text = datas.text.split(', ')[1]
   
!!     day,     date_text = split_text('/', date_text)
!!     month,   date_text = split_text(' ', date_text)
!!     hour,    date_text = split_text(':', date_text)
!!     minutes, date_text = date_text[1].to_i
   
!!     DateTime.new(Date.today.year, month, day, hour, minutes)
     end
   
     def split_text(partern, text)
!!     text  = text.split(partern)
!!     value = text[0]
!!     text  = text[1]
!!     [value.to_i, text]
     end
   
     def parents(datas)
       {
         home_team:    find_or_create_home_team(datas),
         away_team:    find_or_create_away_team(datas),
         championship: find_or_create_championship(datas)
!!     }
     end
   
     def update_or_create_match(match_data, parents)
!!     if match = Match.where(search_data(parents)).first
!!       match.update_attributes!(match_data)
       else
!!       match_data.merge!(parents)
!!       Match.create!(match_data)
       end
     end
   
     def search_data(parents)
       {
         home_team_id: parents[:home_team],
         away_team_id: parents[:away_team],
         championship_id: parents[:championship]
!!     }
     end
   
     def find_or_create_home_team(datas)
!!     home_team_name = datas[0].text
!!     Team.find_or_create_by_name(home_team_name.downcase)
     end
   
     def find_or_create_away_team(datas)
!!     away_team_name = datas[4].text
!!     Team.find_or_create_by_name(away_team_name.downcase)
     end
   
     def find_or_create_championship(datas)
!!     championship_name = datas[6].text
!!     Championship.find_or_create_by_name(championship_name.downcase)
     end
   end

================================================================================
 ./app/services/update_moves_service.rb
================================================================================
   class UpdateMovesService
     FIRST_HALF  = 'etapa-1.htm'
     SECOND_HALF = 'etapa-2.htm'
   
     attr_accessor :match
   
     def initialize(match)
!!     @match = match
     end
   
     def update_moves_from_internet
!!     find_or_create_move(FIRST_HALF)
!!     find_or_create_move(SECOND_HALF)
     end
   
     protected
   
     def find_or_create_move(half)
!!     doc = Nokogiri::HTML(open(get_url(half)), nil, 'UTF-8')
!!     doc.css('tr').each do |move|
!!       params = get_param(move, half)
!!       Move.create!(params) unless Move.where(params).first
       end
     end
   
     def get_url(half)
!!     base_url = UpdateMatchService::LANCENET_URL
!!     match_url = match.internet_url
!!     "#{base_url}#{match_url}#{half}"
     end
   
     def get_param(move, half)
       {
         match_id: match.id,
         minute: get_minutes(move),
         text: get_text(move),
         team_name: get_team_name(move),
         half: get_half(half)
!!     }
     end
   
     def get_half(half)
!!     case half
       when FIRST_HALF
!!       1
       when SECOND_HALF
!!       2
       end
     end
   
     def get_minutes(move)
!!      move.css('.minuto').text.gsub(/[^0-9]/, '')
     end
   
     def get_text(move)
!!     move.css('.lances').text
     end
   
     def get_team_name(move)
!!     team_name = nil
!!     team_tag = move.css('.td-EscudoTime .png')
!!     unless team_tag.empty?
!!       team_name = team_tag[0].attributes['alt'].value.downcase
       end
!!     team_name
     end
   end

================================================================================
 ./app/uploaders/badge_uploader.rb
================================================================================
   # encoding: utf-8
   
   class BadgeUploader < CarrierWave::Uploader::Base
     include CarrierWave::MiniMagick
     include Sprockets::Helpers::RailsHelper
     include Sprockets::Helpers::IsolatedHelper
   
     version :thumb do
       process resize_to_fill: [50, 50, '#ffffff', 'Center']
     end
   
     def default_url
!!     [version_name, 'default.png'].compact.join('-')
     end
   end

================================================================================
 ./app/uploaders/image_uploader.rb
================================================================================
   # encoding: utf-8
   
   class ImageUploader < CarrierWave::Uploader::Base
     # include CarrierWave::MiniMagick
   end

================================================================================
 ./app/workers/twitter_stream.rb
================================================================================
   class TwitterStream
     @queue = :twitter
     DAEMON_FILE = File.join(Rails.root, 'lib', 'daemons', 'team_daemon.rb')
     def self.perform(team_id)
!!     team = Team.find(team_id)
   
!!     options = {
         app_name: team.name,
         ARGV: ['start', '-f', '--', "team=#{team.id}"],
         dir: Rails.root.join('pids'),
         backtrac: true,
         monitor: true
       }
   
!!     Daemons.run(DAEMON_FILE, options)
     end
   end

