metric_fu shift the first line
================================================================================
 ./app/controllers/application_controller.rb
================================================================================
   class ApplicationController < ActionController::Base
     protect_from_forgery
     before_filter :load_teams
     before_filter :load_championchip
   
     protected
     def load_championchip
       @championships = Championship.order_by_matches_count
     end
   
     def load_teams
       @teams = Team.order('name').all
     end
   end

================================================================================
 ./app/controllers/home_controller.rb
================================================================================
   class HomeController < ApplicationController
     skip_before_filter :load_teams, :load_championchip
   
     def index
       UpdateMatchService.new.update_matches_from_internet
   
       @teams = Team.order('name').all
   
       @matches = []
       @championships = Championship.order_by_matches_count
       @teams.each do |team|
         @matches << team.current_match
       end
       @matches.uniq!.sort_by!{|e| e[:start_time]}
     end
   end

================================================================================
 ./app/controllers/matches_controller.rb
================================================================================
   class MatchesController < ApplicationController
     def show
       match = Match.find(params[:id])
       UpdateMovesService.new(match).update_moves_from_internet
       @presenter = MatchesShowPresenter.new(match)
     end
   end

================================================================================
 ./app/controllers/teams_controller.rb
================================================================================
   class TeamsController < ApplicationController
     def show
       @team = Team.find(params[:id])
       @match = @team.current_match
       @matches = @team.matches.includes(:home_team, :away_team)
       @news = @team.news.limit(20)
       @trusted_domains = TrustedDomain.pluck(:name)
       @photos = @team.photos.limit(20)
     end
   end

================================================================================
 ./app/helpers/application_helper.rb
================================================================================
   module ApplicationHelper
   end

================================================================================
 ./app/helpers/teams_helper.rb
================================================================================
   module TeamsHelper
     def team_classes(team)
       championships_ids = team.championships_ids
       "filter championship_#{championships_ids.join(' championship_')}"
     end
   end

================================================================================
 ./app/models/championship.rb
================================================================================
   class Championship < ActiveRecord::Base
     scope :order_by_matches_count, order('matches_count Desc, name Asc')
   
     attr_accessible :name
     has_many :matches
   
   
     def name=(name)
       write_attribute(:name, name.downcase)
     end
   
     def name
       read_attribute(:name).humanize
     end
   end

================================================================================
 ./app/models/match.rb
================================================================================
   class Match < ActiveRecord::Base
     default_scope order('id DESC')
   
     has_many :moves
     has_many :photos
   
     belongs_to :home_team, class_name: 'Team'
     belongs_to :away_team, class_name: 'Team'
     belongs_to :championship, counter_cache: true
   
     attr_accessible :home_team, :away_team, :home_team_score,
                     :away_team_score, :championship, :internet_url, :start_time
   
     delegate :name, to: :championship, prefix: true
     delegate :name, :badge_url, to: :home_team, prefix: true
     delegate :name, :badge_url, to: :away_team, prefix: true
   
     def self.total_time
       3.hours / 60
     end
   
     def home_team_tweets
       home_team.match_tweets(self)
     end
   
     def home_team_tweets_count
       home_team_tweets.count
     end
   
     def home_tweets_per_minute
       (home_team_tweets_count / passed_minutes).round
     end
   
     def home_mood
       home_team_tweets.average(:mood)
     end
   
     def geo_home_team_tweets
       home_team_tweets.geo
     end
   
     def away_team_tweets
       away_team.match_tweets(self)
     end
   
     def away_team_tweets_count
       away_team_tweets.count
     end
   
     def away_tweets_per_minute
       (away_team_tweets_count / passed_minutes).round
     end
   
     def away_mood
       away_team_tweets.average(:mood)
     end
   
     def geo_away_team_tweets
       away_team_tweets.geo
     end
   
     def end_time
       start_time + 2.hours
     end
   
     def open_time
       start_time - 30.minutes
     end
   
     def close_time
       end_time + 30.minutes
     end
   
     def to_s
       "#{home_team_name} VS #{away_team_name}"
     end
   
     private
     def passed_minutes
       (end_time_count_tweet - start_time_count_tweet) / 60
     end
   
     def end_time_count_tweet
       [Time.zone.now, end_time + 30.minute].min
     end
   
     def start_time_count_tweet
       start_time - 30.minutes
     end
   end

================================================================================
 ./app/models/move.rb
================================================================================
   class Move < ActiveRecord::Base
     default_scope order('half Desc, minute Desc')
   
     belongs_to :match
     attr_accessible :match_id, :minute, :text, :team_name, :half
   
     def team_name=(team_name)
       write_attribute(:team_name, team_name.downcase) if team_name
     end
   
     def team_name
       my_team_name = read_attribute(:team_name)
       my_team_name.humanize if my_team_name
     end
   
     def badge_url
       if my_team_name = team_name
         team = Team.find_by_name(my_team_name.downcase)
         team.badge_url if team
       end
     end
   end

================================================================================
 ./app/models/news.rb
================================================================================
   class News < ActiveRecord::Base
     default_scope order('time DESC')
   
     attr_accessible :shorted_url, :team, :retweets, :time, :url, :domain_name,
                     :title, :description, :image_url
   
     belongs_to :team
   
     def self.create_by_tweet(tweet, team)
       shorted_url = tweet['url']
       unshorted_url = unshorted_url(shorted_url)
   
       unless News.find_by_url(unshorted_url)
         create_news(tweet, team, shorted_url, unshorted_url)
       end
     end
   
     private
     def self.shorted_url(tweeter_url)
!!     tweeter_url.expanded_url
     end
   
     def self.unshorted_url(shorted_url)
       my_url = shorted_url
       tmp_url = my_url
   
       while true
         tmp_url = Unshortme.unshort(tmp_url)
         if my_url == tmp_url
           break
         else
           my_url = tmp_url
         end
       end
   
       URI.remove_params(my_url, analytics_params)
     end
   
     def self.analytics_params
       ['utm_term', 'utm_content', 'utm_source', 'utm_medium', 'utm_campaign']
     end
   
     def self.create_news(tweet, team, shorted_url, unshorted_url)
       begin
         params = url_params(shorted_url, unshorted_url).merge({
           team: team,
           retweets: tweet['retweet_count'],
           time: Time.parse(tweet['created_at'])
         }).merge(SummaryUrl.fetch(unshorted_url))
   
         News.create!(params)
       rescue
!!     end
     end
   
     def self.url_params(shorted_url, unshorted_url)
       domain_name = URI.parse(unshorted_url).host
       {
         url: unshorted_url,
         shorted_url: shorted_url,
         domain_name: domain_name
       }
     end
   end

================================================================================
 ./app/models/photo.rb
================================================================================
   class Photo < ActiveRecord::Base
     belongs_to :team
     belongs_to :match
   
     attr_accessible :description, :team, :match, :url
   
     def self.create_by_tweet(tweet, team)
       url = tweet.media[0].media_url
   
       unless Photo.find_by_url(url)
         attributes = {
           description: tweet.text,
           team: team,
           match: team.current_match,
           url: url
         }
         Photo.create!(attributes)
       end
     end
   end

================================================================================
 ./app/models/team.rb
================================================================================
   class Team < ActiveRecord::Base
     mount_uploader :badge, BadgeUploader
   
     has_many :home_matches, class_name: 'Match',
                             foreign_key: 'home_team_id', dependent: :destroy
     has_many :away_matches, class_name: 'Match',
                             foreign_key: 'away_team_id', dependent: :destroy
     has_many :news
     has_many :tweets
     has_many :photos
   
     attr_accessible :name
     after_create :schedule_twitter
   
     def match_tweets(match)
       tweets.match_tweets(match)
     end
   
     def matches
       my_id = self.id
       Match.where('home_team_id = ? OR away_team_id = ?', my_id, my_id)
     end
   
     def championships
       Championship.joins(:matches).merge(matches)
     end
   
     def championships_ids
       championships.pluck('championships.id')
     end
   
     def current_match
       matches.first
     end
   
     def current_match_start_time
       current_match.start_time
     end
   
     def current_match_open_time
       current_match.open_time
     end
   
     def current_match_close_time
       current_match.close_time
     end
   
     def name=(name)
       write_attribute(:name, name.downcase)
     end
   
     def name
       read_attribute(:name).humanize
     end
   
     def geo_tweets
       tweets.geo
     end
   
     def geo_tweets_count
       tweets.geo.count
     end
   
     def tweets_count
       tweets.count
     end
   
     def matches_count
       matches.count
     end
   
     def tweets_per_minute
       tweets_count / (matches_count*(Match.total_time))
     end
   
     private
     def schedule_twitter
       Resque.enqueue(TwitterStream)
     end
   end

================================================================================
 ./app/models/trusted_domain.rb
================================================================================
   class TrustedDomain < ActiveRecord::Base
     attr_accessible :name
   end

================================================================================
 ./app/models/tweet.rb
================================================================================
   class Tweet < ActiveRecord::Base
     scope :match_tweets, lambda { |match|
       where('created_at >= ? AND created_at <= ?',
                               match.open_time, match.close_time)
     }
     scope :geo, where(geo: true)
   
     belongs_to :team, counter_cache: true
     attr_accessible :geo, :text, :team, :minute, :latitude, :longitude
     delegate :name, to: :team, prefix: true
   
     def self.create_using_real_tweet(real_tweet, team)
       tweets_params = {
         text: real_tweet.text,
         team: team,
         minute: get_minute(team)
       }
   
       tweets_params.merge!(get_geo(real_tweet))
   
       Tweet.create!(tweets_params)
     end
   
     private
     def self.get_minute(team)
       (Time.zone.now - team.current_match_start_time) / 60
     end
   
     def self.get_geo(tweet)
       if geo = tweet.geo
         {
           geo: true,
           latitude:  geo.latitude,
           longitude: geo.longitude,
         }
       else
         {}
       end
     end
   end

================================================================================
 ./app/presenters/matches_show_presenter.rb
================================================================================
   class MatchesShowPresenter
     attr_accessor :match
     def initialize(match)
       @match = match
     end
   
     def home_team_tweets_count
       match.home_team_tweets_count
     end
   
     def home_tweets_per_minute
       match.home_tweets_per_minute
     end
   
     def home_mood
       @home_mood ||= match.home_mood
     end
   
     def away_team_tweets_count
       match.away_team_tweets_count
     end
   
     def away_tweets_per_minute
       match.away_tweets_per_minute
     end
   
     def away_mood
       @away_mood ||= match.away_mood
     end
   
     def moves
       match.moves
     end
   
     def tweets_during_the_minutes
       result = {}
   
       get_tweets_group_by_minutes(:home).each do |key, value|
         result[key] = { home: value, away: 0 }
       end
   
       get_tweets_group_by_minutes(:away).each do |key, value|
         if result[key]
           result[key][:away] = value
         else
           result[key] = { home: 0, away: value }
         end
       end
       result.sort
     end
   
     def home_team_name
       match.home_team_name
     end
   
     def away_team_name
       match.away_team_name
     end
   
     private
     def get_tweets_group_by_minutes(team)
       match.send("#{team}_team_tweets").group(:minute).count(:minute)
     end
   end

================================================================================
 ./app/services/update_match_service.rb
================================================================================
   class UpdateMatchService
     LANCENET_URL = 'http://temporeal.lancenet.com.br/'
   
     def update_matches_from_internet
       doc = Nokogiri::HTML(open(LANCENET_URL))
   
       doc.css('#listaJogos tr').each do |match|
         datas = match.css('td')
         match_url = datas.css('a').first.attributes['href'].value
   
         update_or_create_match(match_data(datas, match_url),
                                  parents(datas, match_url))
       end
     end
   
     private
     def update_or_create_match(match_data, parents)
       if match = Match.where(search_data(parents)).first
         match.update_attributes!(match_data)
       else
         match_data.merge!(parents)
         Match.create!(match_data)
       end
     end
   
     def search_data(parents)
       {
         home_team_id: parents[:home_team],
         away_team_id: parents[:away_team],
         championship_id: parents[:championship]
       }
     end
   
     def match_data(datas, match_url)
       {
         home_team_score: datas[1].text,
         away_team_score: datas[3].text,
         internet_url: match_url,
         start_time: start_time(datas)
       }
     end
   
     def start_time(datas)
       date_text = datas.text.split(', ')[1]
   
       day     = split_text('/', date_text)
       month   = split_text(' ', date_text)
       hour    = split_text(':', date_text)
       minutes = date_text[1].to_i
   
       Time.zone.local(Date.today.year, month, day, hour, minutes)
     end
   
     def split_text(partern, text)
       splited_text  = text.split(partern)
       value = splited_text[0]
       text.replace splited_text[1]
       value.to_i
     end
   
     def parents(datas, match_url)
       {
         home_team:    find_or_create_home_team(datas, match_url),
         away_team:    find_or_create_away_team(datas, match_url),
         championship: find_or_create_championship(datas)
       }
     end
   
     def find_or_create_home_team(datas, match_url)
       home_team_name = datas[0].text
       team = Team.find_or_create_by_name(home_team_name.downcase)
   
       unless team.badge?
         team.remote_badge_url = find_home_team_badge(match_url)
         team.save!
       end
       team
     end
   
     def find_home_team_badge(match_url)
       doc = Nokogiri::HTML(open("#{LANCENET_URL}#{match_url}"))
       "#{LANCENET_URL}#{doc.css('.escudo img.png')[0].attributes['src'].value}"
     end
   
     def find_or_create_away_team(datas, match_url)
       away_team_name = datas[4].text
       team = Team.find_or_create_by_name(away_team_name.downcase)
       unless team.badge?
         team.remote_badge_url = find_away_team_badge(match_url)
         team.save!
       end
       team
     end
   
     def find_away_team_badge(match_url)
       doc = Nokogiri::HTML(open("#{LANCENET_URL}#{match_url}"))
       "#{LANCENET_URL}#{doc.css('.escudo img.png')[1].attributes['src'].value}"
     end
   
     def find_or_create_championship(datas)
       championship_name = datas[6].text
       Championship.find_or_create_by_name(championship_name.downcase)
     end
   end

================================================================================
 ./app/services/update_moves_service.rb
================================================================================
   class UpdateMovesService
     FIRST_HALF  = 'etapa-1.htm'
     SECOND_HALF = 'etapa-2.htm'
   
     attr_accessor :match
   
     def initialize(match)
       @match = match
     end
   
     def update_moves_from_internet
       find_or_create_move(FIRST_HALF)
       find_or_create_move(SECOND_HALF)
     end
   
     protected
   
     def find_or_create_move(half)
       doc = Nokogiri::HTML(open(get_url(half)), nil, 'UTF-8')
       doc.css('tr').each do |move|
         params = get_param(move, half)
         Move.create!(params) unless Move.where(params).first
       end
     end
   
     def get_url(half)
       base_url = UpdateMatchService::LANCENET_URL
       match_url = match.internet_url
       "#{base_url}#{match_url}#{half}"
     end
   
     def get_param(move, half)
       {
         match_id: match.id,
         minute: get_minutes(move),
         text: get_text(move),
         team_name: get_team_name(move),
         half: get_half(half)
       }
     end
   
     def get_half(half)
       case half
       when FIRST_HALF
         1
       when SECOND_HALF
         2
       end
     end
   
     def get_minutes(move)
        move.css('.minuto').text.gsub(/[^0-9]/, '')
     end
   
     def get_text(move)
       move.css('.lances').text
     end
   
     def get_team_name(move)
       team_name = nil
       team_tag = move.css('.td-EscudoTime .png')
       unless team_tag.empty?
         team_name = team_tag[0].attributes['alt'].value.downcase
       end
       team_name
     end
   end

================================================================================
 ./app/uploaders/badge_uploader.rb
================================================================================
   # encoding: utf-8
   
   class BadgeUploader < CarrierWave::Uploader::Base
     include CarrierWave::MiniMagick
     include Sprockets::Helpers::RailsHelper
     include Sprockets::Helpers::IsolatedHelper
   
     version :thumb do
       process resize_to_fill: [30, 30, 'Center']
     end
   
     def default_url
       [version_name, 'default.png'].compact.join('-')
     end
   
     def store_dir
       'uploads/badges'
     end
   
     def root
       Rails.root.join 'public/'
     end
   end

================================================================================
 ./app/uploaders/image_uploader.rb
================================================================================
   # encoding: utf-8
   
   class ImageUploader < CarrierWave::Uploader::Base
     # include CarrierWave::MiniMagick
   end

================================================================================
 ./app/workers/create_news.rb
================================================================================
   class CreateNews
     @queue = :news
   
     def self.perform(tweet, team_id)
!!     team = Team.find(team_id)
!!     News.create_by_tweet(tweet, team)
     end
   end

================================================================================
 ./app/workers/mood.rb
================================================================================
   # encoding: utf-8
   class Mood
     @queue = :mood
     def self.perform(tweet_id)
!!     tweet = Tweet.find(tweet_id)
   
!!     words = {
         'gol' => 1,
         'pra cima' => 1,
         'golaço' => 1,
         ':)' => 1,
         ':D' => 1,
         ':P' => 1,
         'perna de pau' => -1,
         'bobo' => -1,
         'imbecil' => -1,
         'idiota' => -1,
         'cabeça de bagre' => -1,
         'incompetente' => -1,
         'gol' => -1,
         ':(' => -1,
         ":'(" => -1,
         'pipocou' => -1,
         'amarelou' => -1,
         'pipoqueiro' => -1
       }
   
!!     words.each do |word, value|
!!       tweet.mood += value if tweet.text.match /word/
       end
   
!!     tweet.save!
     end
   end

================================================================================
 ./app/workers/twitter_stream.rb
================================================================================
   class TwitterStream
     @queue = :twitter
     DAEMON_FILE = File.join(Rails.root, 'lib', 'daemons', 'team_daemon.rb')
     def self.perform
       system "bundle exec ruby #{DAEMON_FILE} stop"
       system "bundle exec ruby #{DAEMON_FILE} start"
     end
   end

