metric_fu shift the first line
================================================================================
 ./app/controllers/application_controller.rb
================================================================================
   class ApplicationController < ActionController::Base
     protect_from_forgery
     before_filter :load_teams
     before_filter :load_championchip
   
     protected
     def load_championchip
       @championships = Championship.all
     end
   
     def load_teams
       @teams = Team.all
     end
   end

================================================================================
 ./app/controllers/home_controller.rb
================================================================================
   class HomeController < ApplicationController
     skip_before_filter :load_teams, :load_championchip
   
     def index
       UpdateMatchService.new.update_matches_from_internet
   
       @matches = Match.includes(:home_team, :away_team).all
       @teams = Team.all
       @championships = Championship.all
     end
   end

================================================================================
 ./app/controllers/matches_controller.rb
================================================================================
   class MatchesController < ApplicationController
     def show
       @match = Match.find(params[:id])
       @moves = @match.moves
     end
   end

================================================================================
 ./app/controllers/teams_controller.rb
================================================================================
   class TeamsController < ApplicationController
     def show
       @team = Team.find(params[:id])
       @match = @team.current_match
       @news = @team.news
     end
   end

================================================================================
 ./app/helpers/application_helper.rb
================================================================================
   module ApplicationHelper
   end

================================================================================
 ./app/helpers/teams_helper.rb
================================================================================
   module TeamsHelper
     def team_classes(team)
       championships_ids = team.championships_ids
       "filter championship_#{championships_ids.join(' championship_')}"
     end
   end

================================================================================
 ./app/models/championship.rb
================================================================================
   class Championship < ActiveRecord::Base
     attr_accessible :name
   
     has_many :matches
   
   
     def name=(name)
       write_attribute(:name, name.downcase)
     end
   
     def name
       read_attribute(:name).humanize
     end
   end

================================================================================
 ./app/models/match.rb
================================================================================
   class Match < ActiveRecord::Base
     has_many :moves
   
     belongs_to :home_team, class_name: 'Team'
     belongs_to :away_team, class_name: 'Team'
     belongs_to :championship
   
     delegate :name, to: :championship, prefix: true
     delegate :name, :badge_url, to: :home_team, prefix: true
     delegate :name, :badge_url, to: :away_team, prefix: true
   
     attr_accessible :home_team, :away_team, :home_team_score,
                     :away_team_score, :championship
   end

================================================================================
 ./app/models/move.rb
================================================================================
   class Move < ActiveRecord::Base
     default_scope order('id DESC')
   
     belongs_to :match
   end

================================================================================
 ./app/models/news.rb
================================================================================
   class News < ActiveRecord::Base
     mount_uploader :image, ImageUploader
   
     belongs_to :team
   end

================================================================================
 ./app/models/team.rb
================================================================================
   class Team < ActiveRecord::Base
     mount_uploader :badge, BadgeUploader
   
     has_many :home_matches, class_name: 'Match', foreign_key: 'home_team_id'
     has_many :away_matches, class_name: 'Match', foreign_key: 'away_team_id'
     has_many :news
   
     attr_accessible :name
   
     def matches
       my_id = self.id
       Match.where('home_team_id = ? OR away_team_id = ?', my_id, my_id)
     end
   
     def championships
       Championship.joins(:matches).merge(matches)
     end
   
     def championships_ids
       championships.pluck('championships.id')
     end
   
     def current_match
       matches.last
     end
   
     def name=(name)
       write_attribute(:name, name.downcase)
     end
   
     def name
       read_attribute(:name).humanize
     end
   end

================================================================================
 ./app/services/update_match_service.rb
================================================================================
   class UpdateMatchService
     LANCENET_URL = 'http://temporeal.lancenet.com.br/'
   
     def update_matches_from_internet
       doc = Nokogiri::HTML(open(LANCENET_URL))
   
       doc.css('#listaJogos tr').each do |match|
         datas = match.css('td')
         update_or_create_match(match_data(datas), parents(datas))
       end
     end
   
     private
     def match_data(datas)
       {
         home_team_score: datas[1].text,
         away_team_score: datas[3].text
       }
     end
   
     def parents(datas)
       {
         home_team:    find_or_create_home_team(datas),
         away_team:    find_or_create_away_team(datas),
         championship: find_or_create_championship(datas)
       }
     end
   
     def update_or_create_match(match_data, parents)
       if match = Match.where(search_data(parents)).first
         match.update_attributes!(match_data)
       else
         match_data.merge!(parents)
         Match.create!(match_data)
       end
     end
   
     def search_data(parents)
       {
         home_team_id: parents[:home_team],
         away_team_id: parents[:away_team],
         championship_id: parents[:championship]
       }
     end
   
     def find_or_create_home_team(datas)
       home_team_name = datas[0].text
       Team.find_or_create_by_name(home_team_name.downcase)
     end
   
     def find_or_create_away_team(datas)
       away_team_name = datas[4].text
       Team.find_or_create_by_name(away_team_name.downcase)
     end
   
     def find_or_create_championship(datas)
       championship_name = datas[6].text
       Championship.find_or_create_by_name(championship_name.downcase)
     end
   end

================================================================================
 ./app/uploaders/badge_uploader.rb
================================================================================
   # encoding: utf-8
   
   class BadgeUploader < CarrierWave::Uploader::Base
     include CarrierWave::MiniMagick
     include Sprockets::Helpers::RailsHelper
     include Sprockets::Helpers::IsolatedHelper
   
     version :thumb do
       process resize_to_fill: [50, 50, '#ffffff', 'Center']
     end
   
     def default_url
       [version_name, 'default.png'].compact.join('-')
     end
   end

================================================================================
 ./app/uploaders/image_uploader.rb
================================================================================
   # encoding: utf-8
   
   class ImageUploader < CarrierWave::Uploader::Base
     # include CarrierWave::MiniMagick
   end

